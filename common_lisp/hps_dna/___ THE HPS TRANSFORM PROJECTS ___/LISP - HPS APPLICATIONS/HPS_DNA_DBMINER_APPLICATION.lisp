;; ****************************************************************************************************************
;;                           *****     INVOCATION OF THE MAIN ENTRY POINT         ******
;;      THIS FILE CONTAINS EXAMPLES OF THE APPLICATION AND USE OF THE HPS TRANSFORM AND THE PROVIDED ROUTINES
;; ****************************************************************************************************************


;; ********************************************************************************************
;; ********************************************************************************************
;; THIS MODULE IS PART OF AN IMPLEMENTATION OF AN ONLINE HPS TRANSFORM.  THE HPS TRANSFORM WAS 
;; DESCRIBED IN THE PAPER ENTITLED: 
;; 			    THE HPS TRANSFORM AND ITS APPLICATIONS
;;                          www3.webng.com/nelsonmanohar/research/
;;
;; 	          THIS CODE WAS WRITTEN AND ITS COPYRIGHTED (2007) BY 
;; 			    DR. NELSON R. MANOHAR ALERS
;; 			      nelsonmanohar@yahoo.com
;; 			           AUGUST 2007
;;
;; THIS CODE IS NOT IN THE PUBLIC DOMAIN. THIS CODE IS NOT INTENDED FOR DISTRIBUTION. PLEASE DO
;; NOT MODIFY THIS CODE. PLEASE INFORM THE AUTHOR OF ANY UNINTENDED OR UNAUTHORIZED DISTRIBUTION 
;; AND/OR ACCESS TO THIS CODE.
;; ********************************************************************************************


;; ****************************************************************************************************************
;; THE HPS DNA PATTERN MINER FOR LOCAL OR REMOTE DATABASES
;; ****************************************************************************************************************
(defun HPS_DNA_DBMINER_APPLICATION ( &key (OUTPUT_MODE		  nil)
				     	  (LOCAL_DNASEQ_DB  	  "E:/HPS_DATA/HPS_INPUTS/DNA_E_COLI_K12/") 
				     	  (REMOTE_DNASEQ_DB 	   nil)
					  (TEST_SEQUENCES	'( 1786520TESTCASE ))
					  (SIGNATURE_SEQNUM 	   1786520)
					  (SIGNATURE_FROMINDEX 	   5000)
					  (SIGNATURE_TOINDEX   	   6000)
					  (SIGNATURE_MUTATION      nil))		

	;; **********************************************************************************************************
	;; **********************************************************************************************************
	(setf *HPS_SIGNATURESEQ_NUM* 		SIGNATURE_SEQNUM)		;;; SIGNATURE     - ONLY VALID IF ACCESSING THE WEB
	(setf *HPS_SIGNATURE_FROM_INDEX*   	SIGNATURE_FROMINDEX)		;;; FROM     	  - ONLY VALID IF ACCESSING THE WEB
	(setf *HPS_SIGNATURE_TO_INDEX*   	SIGNATURE_TOINDEX)		;;; TO		  - ONLY VALID IF ACCESSING THE WEB
	(setf *HPS_MUTATE_SIGNATURE* 		SIGNATURE_MUTATION)		;;; MUTATION CONTROL
	(setf *HPS_ACCESS_WWW_SEQS* 		REMOTE_DNASEQ_DB)		;;; WEB ACCESS
	(setf *HPS_ACCESS_LDB_SEQS* 		LOCAL_DNASEQ_DB )		;;; LOCAL DB ACCESS - ONLY OPTIONAL IF NO WEB ACCESS
	;; **********************************************************************************************************


	;; **********************************************************************************************************
	;; the GENOME DATABASE LOOP
	;; **********************************************************************************************************
	(dolist (sequence TEST_SEQUENCES 'GENOMEWIDE_SEARCH)
		(HPS_print_separator 2)

		;; **************************************************************************************************
		;; clean previous contents of temporary directory of autogenerated analyses for the DNA application
		;; **************************************************************************************************
		(HPS_system_interface 	:COMMAND 	'CLEAN )
		;; **************************************************************************************************


		;; **************************************************************************************************
		;;; TEST SEQUENCE - ONLY VALID IF ACCESSING THE WEB
		;; **************************************************************************************************
		(setf *HPS_TESTSEQUENCE_NUM* 	sequence)				

		(setf *HPS_DNA_FINDINGS_MADE* 
	      	(HPS_DNA_APPLICATION 		:OUTPUT_MODE		  OUTPUT_MODE			;;; OUTPUT
						:HPS_TERSE		  t
		  				:HPS_DNA_WWW_ACCESS	  *HPS_ACCESS_WWW_SEQS* 	;;; WEB ACCESS
		  				:HPS_DNA_LDB_ACCESS	  *HPS_ACCESS_LDB_SEQS*		;;; LDB
		  				:HPS_TESTSEQUENCE_NUMBER  *HPS_TESTSEQUENCE_NUM* 	;;; TEST SEQUENCE
		  				:HPS_SIGNSEQUENCE_NUMBER  *HPS_SIGNATURESEQ_NUM* 	;;; SIGNATURE
		  				:HPS_SIGNSEQUENCE_FROM    *HPS_SIGNATURE_FROM_INDEX*   	;;; FROM
		  				:HPS_SIGNSEQUENCE_TO      *HPS_SIGNATURE_TO_INDEX*  	;;; TO
		  				:HPS_MUTATE_SIGNATURE	  *HPS_MUTATE_SIGNATURE* ))	;;; MUTATION CONTROL
		;; **************************************************************************************************


		;; **************************************************************************************************
		;; archive the data of the autogenerated analyses for the DNA application of signature against test sequence
		;; **************************************************************************************************
		(when *HPS_DNA_FINDINGS_MADE* 
			(HPS_system_interface 	:COMMAND 	'PACK
			       	        	:DATUM 		(format nil "SIG~A[~D-~D]_SEQ~A" *HPS_SIGNATURESEQ_NUM*  
				  						 	 	 *HPS_SIGNATURE_FROM_INDEX*    
				  						 	 	 *HPS_SIGNATURE_TO_INDEX*     
				  						 	 	 *HPS_TESTSEQUENCE_NUM* )))
		;; **************************************************************************************************


		;; **************************************************************************************************
		;; **************************************************************************************************
		(let* 	((times_stack 		(nbutlast (reverse *HPS_UNIV_TIME_STACK*)))
			 (task_start 		(second (pop times_stack)))
			 (iter			0)
			 (dummy			(format t "~% TIMES: " nil)))
		  	(dolist (task times_stack 'TIMEPROFILING)
				(format t " ~14A=[~As]	" (first task ) (- (second task ) task_start))
				(when (equal (mod iter 3) 2) 
					(format t "~% TIMES: " nil))
				(incf iter)
				(setf task_start (second task ))))
		(format t "~%" nil)
		;; **************************************************************************************************


		;; **************************************************************************************************
		;; **************************************************************************************************
		(HPS_DNA_GLOBAL_RESET)
		;; **************************************************************************************************


		(HPS_print_separator 2)))
;; ****************************************************************************************************************





