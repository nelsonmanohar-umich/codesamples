#!/usr/bin/env python


# #############################################################################
__doc__ = 'IMPORTANT: CHANGES TO THIS FILE [%s] ARE BROADCAST UPON STARTUP OF SERVER AND CLIENTS TO ALL PYTHON CLIENT EC2 INSTANCES' % __file__
print __doc__
# #############################################################################


# #############################################################################
import time
import sys
import socket
import json
import traceback
import os
import os.path
# #############################################################################


# #############################################################################
TAG_SEPARATOR_1  = ":"
TAG_SEPARATOR_2  = "-->"
TSTAMP_SEPARATOR = ":"
FIELD_SEPARATOR  = ","
# #############################################################################

# #############################################################################
OPMODE_TRAIN        = "train"
OPMODE_TEST         = "test"
OPMODE_PREDICT      = "test"
# #############################################################################

# #############################################################################
RJE_COUNTER = 1000
XNAME = ""
QHOST = "72.241.103.12"
RDATA_DEFAULT_IMAGE = "T4.RData"
RJE_QNAME = "train_predict"
SVR_QNAME = "responses"
QNAME = RJE_QNAME
# #############################################################################

# #############################################################################
# Clean up CVS and RData files that were generated
# #############################################################################
NUMBER_EC2NODE_CORES = 2
CLEANUP_CLT_AWS_NODE_DATA = False
REBUILD_MODELS = True
# #############################################################################


# #############################################################################
AWS = False
DEFAULT_USER = "nrm"
USER = DEFAULT_USER
# #############################################################################

# #############################################################################
try:
    USER = os.getlogin()
    if not USER: USER = "ubuntu"
    AWS = DEFAULT_USER != USER
    if AWS: USER = "ubuntu"
except:
    hostname = socket.gethostname()
    AWS = hostname.startswith("ip-") or "aws" in hostname
    if AWS: USER = "ubuntu"
PREFIX = "/home/%s/WORKSPACE/R/" % USER
# #############################################################################


# #############################################################################
def get_prefix():
    return PREFIX
# #############################################################################


# #############################################################################
def VALIDATE(attr, default):
    if not attr:
        attr = default
    return attr
# #############################################################################


# #############################################################################
def RJE_HEADER(what=None, n=0):
    print '-' * 80
    if what:
        print "%.2f %s" % (time.time(), what)
        print '-' * 80
    if n > 0:
        for i in range(n):
            print
    return
# #############################################################################


# #############################################################################
def RJE_DEBUG(dtype="INFO", msg="", val="", code=-1):
    print "[%16.2f] [%8s]: %s --> %s" % (time.time(), dtype, msg, val)
    if dtype == "ERROR":
        RJE_HEADER()
        traceback.print_stack()
        RJE_HEADER()
        sys.exit(code)
    return val
# #############################################################################


# #############################################################################
def get_id(lookupsite="google.com"):
    global RJE_COUNTER
    RJE_COUNTER += 1
    return RJE_COUNTER
# #############################################################################


# #############################################################################
def whoami(lookupsite="google.com"):
    global RJE_COUNTER

    host = socket.gethostname()
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect((lookupsite, 80))
        myip = s.getsockname()[0]
        s.close()
    except:
        myip = "127.0.0.1"
    myid = "%s:%s:%s" % (host, myip, RJE_COUNTER)
    return myid
# #############################################################################


# #############################################################################
def get_rje_tag(msg, rje_id):
    return "[%s] --> %s" % (rje_id, msg)
# #############################################################################


# #############################################################################
def remove_tag(msg, sep=":"):
    items = msg.split(sep)
    tag = items[0]
    msg = sep.join(items[1:])
    return (tag, msg)
# #############################################################################


# #############################################################################
def _remove_tag(msg, n=11):
    tag, msg = msg[0:n], msg[n:]
    return (tag, msg)
# #############################################################################


# #############################################################################
def mqformatter(names, values, rje_id):
    d = dict(zip(names, [str(x) for x in values]))
    f = json.dumps(d, separators=[",", ":"])
    g = get_rje_tag(f, rje_id)
    return g
# #############################################################################


# #############################################################################
def timestamp():
    t = time.strftime("%H:%M:%S")
    print(t)
    return t
# #############################################################################


# #############################################################################
def do_preamble(n1=5,n2=20,n3=5):
    print '-' * 80
    print(time.strftime("%H:%M:%S"))
    for i in range(n1):
        print "." * 80
    for i in range(n2):
        print
    for i in range(n3):
        print "." * 80
    print '-' * 80
    print '-' * 80
# #############################################################################



# #############################################################################
def fake_uniq_id(N=1000000):
    return (int(time.time()) % N) + N
# #############################################################################
