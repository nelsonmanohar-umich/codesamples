;; ****************************************************************************************************************
;;                           *****     INVOCATION OF THE MAIN ENTRY POINT         ******
;;      THIS FILE CONTAINS EXAMPLES OF THE APPLICATION AND USE OF THE HPS TRANSFORM AND THE PROVIDED ROUTINES
;; ****************************************************************************************************************


;; ********************************************************************************************
;; ********************************************************************************************
;; THIS MODULE IS PART OF AN IMPLEMENTATION OF AN ONLINE HPS TRANSFORM.  THE HPS TRANSFORM WAS 
;; DESCRIBED IN THE PAPER ENTITLED: 
;; 			    THE HPS TRANSFORM AND ITS APPLICATIONS
;;                          www3.webng.com/nelsonmanohar/research/
;;
;; 	          THIS CODE WAS WRITTEN AND ITS COPYRIGHTED (2007) BY 
;; 			    DR. NELSON R. MANOHAR ALERS
;; 			      nelsonmanohar@yahoo.com
;; 			           AUGUST 2007
;;
;; THIS CODE IS NOT IN THE PUBLIC DOMAIN. THIS CODE IS NOT INTENDED FOR DISTRIBUTION. PLEASE DO
;; NOT MODIFY THIS CODE. PLEASE INFORM THE AUTHOR OF ANY UNINTENDED OR UNAUTHORIZED DISTRIBUTION 
;; AND/OR ACCESS TO THIS CODE.
;; ********************************************************************************************


;; ****************************************************************************************************************
;; ****************************************************************************************************************
(defun HPS_STENO_APPLICATION ( &key (output_mode nil) )
	;; set to a lean output mode as default, no detailed report with graphics and analyses
  	(setf *HPS_FULL_OUTPUT_MODE*            output_mode)

	;; invocation of STENO encoder: encodes characters into ATS segments hidden behind the specified HPS-removable noise cloud
	(pprint 'HPS_STENO_ENCODER_START)

	(STENO_encoder_driver_init) 

	(STENO_encoder_main  :alphabet	       *STENO_mapalphabet*  	  ;; the alphabet in use
			     :mapcode          *STENO_mapcode*      	  ;; the numerical mapping code use to map letters to numbers
			     :inputtext     	nil		  	  ;; the text being encoded
	  		     			:avgdur		120   	  ;; the maximum duration of encoded segments
			     			:avgdurvar	30	  ;; the maximum variability in segment duration
			     			:gapdur		3   	  ;; the maximum duration of gaps between segments
			     			:noisefactor	26	  ;; the (1/2) magnitude of the HPS uncoverable noise cloud
			     :randomvals_file  "E:/HPS_DATA/HPS_INPUTS/HPS_RANDOM_VALUES.DAT"
			     :intofilename     "E:/HPS_DATA/HPS_INPUTS/HPS_INPUT_SERIES.DAT" )

	(pprint 'HPS_STENO_ENCODER_DONE)

	;; invoke the main entry point of the HPS transform
   	(HPS_driver     :inputfile             "HPS_INPUT_SERIES.DAT" 
	 		:basedir               *HPS_BASE_PATH*  
	 		:outputfile            "HPS_APPROXIMATION.DAT"
						:m          	  60 			       
						:mp 	    	  30
					        :timeshift  	  30
					        :seglimit   	  6
					        :alphalevel 	  0.0050
						:forecast_winsize 60
						:K          	  3
						:segtrivial 	  1 
						:mserelax   (sqrt 0.25) 	  
						:msedelay   	  0 	
						:printdur   	  3 
	 		:outputdir             *HPS_OUTPUT_PATH*
	 		:datasetfile           "HPS_FULLDATA.DAT" 
	 		:reportfile            "RESULTANT_HPS_APPROXIMATION.HTM" 
	 		:HPS_FULL_OUTPUT_MODE	*HPS_FULL_OUTPUT_MODE* )

  	(pprint 'STENO_DECODER_START)

	;; initialize the decoder with the shared secret (alphabet) from the encoder
	(STENO_decoder_driver_init)

	;; where the output report will be placed
	(setf *STENO_reportfile* (format nil "~A~A" *HPS_BASE_PATH* "HPS_REPORT_STENO.HTM" ))
	(setf *STENO_outputdir*  *HPS_OUTPUT_PATH* )
	;; (setf *STENO_outputdir*  "F:/HPS_DATA/HPS_OUTPUTS/" )
	(setf *STENO_basedir*    *HPS_BASE_PATH* )
	;; (setf *STENO_basedir*    "F:/HPS_DATA/" )

	;; the invocation of the STENO decoder, it takes a series of ATS segments hidden behind an HPS-removable noise cloud
	;; and extract the HPS fundamental frequencies of these ATS segments
	(STENO_iterative_decoder 
	  		:MAIN_htmlreport *STENO_reportfile*
				 		:seggoals 	  '( 90 ) 
				 		:segthresholds    '( 30 35 )
			:basedir	  *STENO_basedir*
		 	:outputdir	  *STENO_outputdir* )

	(format t "~% DECODING REPORT FOUND ON: ~S" *STENO_reportfile* )

  	(pprint 'STENO_DECODER_END )

	;; prepare the data of the autogenerated analyses for the HPS Transform
	(when *HPS_FULL_OUTPUT_MODE*
		(HPS_gnuplot_interface  :COMMAND 	'PLOT
		   	       		:OUTPUT_DIR 	*HPS_OUTPUT_PATH*
		   	       		:WITH_CMD_FILE 	(format nil "~A~A" *HPS_BASE_PATH* "HPS_TRANSFORM_WINDOWS_CMDS.BAT" )))

	(unless *HPS_FULL_OUTPUT_MODE*
	  	nil))
;; ****************************************************************************************************************








